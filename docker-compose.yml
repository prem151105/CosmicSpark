version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.13-community
    container_name: mosdac-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
    networks:
      - mosdac-network

  # Ollama LLM Server
  ollama:
    image: ollama/ollama:latest
    container_name: mosdac-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=5m
    networks:
      - mosdac-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:11434/api/tags"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: mosdac-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mosdac-network

  # MOSDAC Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.simple
    container_name: mosdac-backend
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - OLLAMA_BASE_URL=http://ollama:11434
      - CHROMADB_PATH=/app/data/chromadb
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - neo4j
      - ollama
      - redis
    networks:
      - mosdac-network
    restart: unless-stopped

  # MOSDAC Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: mosdac-frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - mosdac-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mosdac-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - mosdac-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mosdac-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mosdac-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mosdac-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mosdac-network

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  ollama_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  mosdac-network:
    driver: bridge